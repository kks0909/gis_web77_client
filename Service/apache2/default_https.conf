#
# Summary: Default server configuration for https
# Provides: VirtualHost
# Provides: VirtualHost-https
# Provides: VirtualHost-https-default
#

#
# This is the Apache server configuration file providing SSL support.
# It contains the configuration directives to instruct the server how to
# serve pages over an https connection. For detailing information about these
# directives see <URL:http://httpd.apache.org/docs/2.2/mod/mod_ssl.html>
#
# Do NOT simply read the instructions in here without understanding
# what they do.  They're here only as hints or reminders.  If you are unsure
# consult the online docs. You have been warned.
#

<IfModule ssl_module>
	##
	## SSL Virtual Host Context
	##

	<VirtualHost *:443>

		#   General setup for the virtual host
		ServerName localhost.localdomain:443
		ServerAdmin webmaster@example.com
		ErrorLog "/var/log/httpd2/error_log"
		TransferLog "/var/log/httpd2/access_log"
		DocumentRoot "/home/websys53/gis_web77/website"

		RewriteEngine On
		RewriteRule ^/web55/?(.*) https://%{SERVER_NAME}/$1 [R,L]
		RewriteRule ^/web5/?(.*) https://%{SERVER_NAME}/$1 [R,L]
		RewriteRule ^/web77/?(.*) https://%{SERVER_NAME}/$1 [R,L]
		

		#Проксирование api node.js сервисов
		ProxyPass /api/ http://127.0.0.1:3000/api/ timeout=28000
		ProxyPassReverse /api/ http://127.0.0.1:3000/api/ timeout=28000

		ProxyPass /ute http://127.0.0.1:3002/api/ute timeout=28000
		ProxyPassReverse /ute http://127.0.0.1:3002/api/ute timeout=28000

		#Указать корректный IP сервера 60
		ProxyPass /tiletrees http://192.168.17.141/tiletrees
		ProxyPassReverse /tiletrees http://192.168.17.141/tiletrees
		
		#Указать корректный IP сервера 60
		ProxyPass /Public/Data/WMS http://192.168.17.141/Public/Data/WMS
		ProxyPassReverse /Public/Data/WMS http://192.168.17.141/Public/Data/WMS

		#Указать корректный IP сервера 60. Доп. прокси. Если потребуется. 
		ProxyPass /mono http://192.168.17.141
		ProxyPassReverse /mono http://192.168.17.141


		#Проксирование сервера маршрутизации
		ProxyPass /route http://10.9.15.13:8484/route
		ProxyPassReverse /route http://10.9.15.13:8484/route

		ProxyPass /nearest http://10.9.15.13:8484/nearest
		ProxyPassReverse /nearest http://10.9.15.13:8484/nearest

		ProxyPass /locate http://10.9.15.13:8484/locate
		ProxyPassReverse /locate http://10.9.15.13:8484/locate
	
		#   SSL Engine Switch:
		#   Enable/Disable SSL for this virtual host.
		SSLEngine on

		#   SSL Protocol support:
		#   List the protocol versions which clients are allowed to
		#   connect with. Disable SSLv2 by default (cf. RFC 6176).
		SSLProtocol all -SSLv2

		#   SSL Cipher Suite:
		#   List the ciphers that the client is permitted to negotiate.
		#   See the mod_ssl documentation for a complete list.
		SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5

		#   Speed-optimized SSL Cipher configuration:
		#   If speed is your main concern (on busy HTTPS servers e.g.),
		#   you might want to force clients to specific, performance
		#   optimized ciphers. In this case, prepend those ciphers
		#   to the SSLCipherSuite list, and enable SSLHonorCipherOrder.
		#   Caveat: by giving precedence to RC4-SHA and AES128-SHA
		#   (as in the example below), most connections will no longer
		#   have perfect forward secrecy - if the server's key is
		#   compromised, captures of past or future traffic must be
		#   considered compromised, too.
		#SSLCipherSuite RC4-SHA:AES128-SHA:HIGH:MEDIUM:!aNULL:!MD5
		#SSLHonorCipherOrder on

		#   Server Certificate:
		#   Point SSLCertificateFile at a PEM encoded certificate.  If
		#   the certificate is encrypted, then you will be prompted for a
		#   pass phrase.  Note that a kill -HUP will prompt again.  Keep
		#   in mind that if you have both an RSA and a DSA certificate you
		#   can configure both in parallel (to also allow the use of DSA
		#   ciphers, etc.)
		SSLCertificateFile "/var/lib/ssl/certs/gis.pem"
		#SSLCertificateFile "/var/lib/ssl/certs/httpd2-dsa.cert"

		#   Server Private Key:
		#   If the key is not combined with the certificate, use this
		#   directive to point at the key file.  Keep in mind that if
		#   you've both a RSA and a DSA private key you can configure
		#   both in parallel (to also allow the use of DSA ciphers, etc.)
		SSLCertificateKeyFile "/var/lib/ssl/private/gis.key"
		#SSLCertificateKeyFile "/var/lib/ssl/private/httpd2-dsa.key"

		#   Server Certificate Chain:
		#   Point SSLCertificateChainFile at a file containing the
		#   concatenation of PEM encoded CA certificates which form the
		#   certificate chain for the server certificate. Alternatively
		#   the referenced file can be the same as SSLCertificateFile
		#   when the CA certificates are directly appended to the server
		#   certificate for convinience.
		#SSLCertificateChainFile "/var/lib/ssl/certs/gis.pem"

		#   Certificate Authority (CA):
		#   Set the CA certificate verification path where to find CA
		#   certificates for client authentication or alternatively one
		#   huge file containing all of them (file must be PEM encoded)
		#   Note: Inside SSLCACertificatePath you need hash symlinks
		#         to point to the certificate files. Use the provided
		#         Makefile to update the hash symlinks after changes.
		#SSLCACertificatePath "/var/lib/ssl/certs"
		#SSLCACertificateFile "/var/lib/ssl/certs/gis.pem"

		#   Certificate Revocation Lists (CRL):
		#   Set the CA revocation path where to find CA CRLs for client
		#   authentication or alternatively one huge file containing all
		#   of them (file must be PEM encoded)
		#   Note: Inside SSLCARevocationPath you need hash symlinks
		#         to point to the certificate files. Use the provided
		#         Makefile to update the hash symlinks after changes.
		#SSLCARevocationPath "/var/lib/ssl/certs"
		#SSLCARevocationFile "/var/lib/ssl/certs/ca-bundle.crl"

		#   Client Authentication (Type):
		#   Client certificate verification type and depth.  Types are
		#   none, optional, require and optional_no_ca.  Depth is a
		#   number which specifies how deeply to verify the certificate
		#   issuer chain before deciding the certificate is not valid.
		#SSLVerifyClient require
		#SSLVerifyDepth  10

		#   Access Control:
		#   With SSLRequire you can do per-directory access control based
		#   on arbitrary complex boolean expressions containing server
		#   variable checks and other lookup directives.  The syntax is a
		#   mixture between C and Perl.  See the mod_ssl documentation
		#   for more details.
		#<Location />
		#	SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
		#	            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
		#	            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
		#	            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
		#	            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
		#	           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
		#</Location>

		#   SSL Engine Options:
		#   Set various options for the SSL engine.
		#   o FakeBasicAuth:
		#     Translate the client X.509 into a Basic Authorisation.  This means that
		#     the standard Auth/DBMAuth methods can be used for access control.  The
		#     user name is the `one line' version of the client's X.509 certificate.
		#     Note that no password is obtained from the user. Every entry in the user
		#     file needs this password: `xxj31ZMTZzkVA'.
		#   o ExportCertData:
		#     This exports two additional environment variables: SSL_CLIENT_CERT and
		#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
		#     server (always existing) and the client (only existing when client
		#     authentication is used). This can be used to import the certificates
		#     into CGI scripts.
		#   o StdEnvVars:
		#     This exports the standard SSL/TLS related `SSL_*' environment variables.
		#     Per default this exportation is switched off for performance reasons,
		#     because the extraction step is an expensive operation and is usually
		#     useless for serving static content. So one usually enables the
		#     exportation for CGI and SSI requests only.
		#   o StrictRequire:
		#     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
		#     under a "Satisfy any" situation, i.e. when it applies access is denied
		#     and no other module can change it.
		#   o OptRenegotiate:
		#     This enables optimized SSL connection renegotiation handling when SSL
		#     directives are used in per-directory context.
		#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
		<FilesMatch "\.(cgi|shtml|phtml|php)$">
			SSLOptions +StdEnvVars
		</FilesMatch>
		<FilesMatch "\.(pdf|gpx|kml|doc|img|rtf|gtar|gz|tar|zip|txt|vrml|exe|wrl|m_3d_scene|vrz|dwg|PDF|GPX|KML|DOC|IMG|RTF|GTAR|GZ|TAR|ZIP|TXT|VRML|EXE|WRL|DWG|M_3D_SCENE)$">
			Header set Content-Disposition attachment
		</FilesMatch>
		<Directory "/var/www/cgi-bin">
			SSLOptions +StdEnvVars
		</Directory>
		<Directory /home/websys53/gis_web77/website>
			Options -Indexes +FollowSymLinks
			AllowOverride All
			Require all granted
		</Directory>

		<IfModule setenvif_module>
			#   SSL Protocol Adjustments:
			#   The safe and default but still SSL/TLS standard compliant shutdown
			#   approach is that mod_ssl sends the close notify alert but doesn't wait for
			#   the close notify alert from client. When you need a different shutdown
			#   approach you can use one of the following variables:
			#   o ssl-unclean-shutdown:
			#     This forces an unclean shutdown when the connection is closed, i.e. no
			#     SSL close notify alert is send or allowed to received.  This violates
			#     the SSL/TLS standard but is needed for some brain-dead browsers. Use
			#     this when you receive I/O errors because of the standard approach where
			#     mod_ssl sends the close notify alert.
			#   o ssl-accurate-shutdown:
			#     This forces an accurate shutdown when the connection is closed, i.e. a
			#     SSL close notify alert is send and mod_ssl waits for the close notify
			#     alert of the client. This is 100% SSL/TLS standard compliant, but in
			#     practice often causes hanging connections with brain-dead browsers. Use
			#     this only for browsers where you know that their SSL implementation
			#     works correctly.
			#   Notice: Most problems of broken clients are also related to the HTTP
			#   keep-alive facility, so you usually additionally want to disable
			#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
			#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
			#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
			#   "force-response-1.0" for this.
			BrowserMatch "MSIE [2-5]" \
				nokeepalive ssl-unclean-shutdown \
				downgrade-1.0 force-response-1.0
		</IfModule>

		<IfModule log_config_module>
			#   Per-Server Logging:
			#   The home of a custom SSL log file. Use this when you want a
			#   compact non-error SSL logfile on a virtual host basis.
			CustomLog "/var/log/httpd2/ssl_request_log" \
				  "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
		</IfModule>
	</VirtualHost>
</IfModule>
